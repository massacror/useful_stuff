:PROPERTIES:
:ID:       a81fba79-8f18-4c4c-b8c9-c6a731148caa
:END:
#+title: emacs config 2024
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/system-crafters.el :mkdirp yes

*** sauver la config
[[id:f3f18585-dc83-4248-bb39-27b20587ff0b][Dépot useful stuff]]
#+begin_src shell
cp /home/kim/org-roam/20240808095838-config_emacs_system_crafters.org /home/kim/Documents/useful_stuff_depot/config_emacs.org
cd /home/kim/Documents/useful_stuff_depot
xterm -e git commit -a
gnome-terminal -- /bin/sh -c "git push; exec bash"
#+end_src

#+RESULTS:

* Welcome!

This is the configuration we've been building in the *Emacs From Scratch* series,
  now written as an Org Mode document.
  This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.

*NOTE:* If you run into any issues while using this configuration, please [[https://github.com/daviwil/emacs-from-scratch/issues/new][file an issue]] or send me an email at =david at systemcrafters.cc=.

The following variables are used to tweak some of the configuration pieces for use in the live streams so you might need to adjust them for your local machine if you try to use this configuration directly.

#+begin_src emacs-lisp

;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
;;       in Emacs and init.el will be generated automatically!

;; You will most likely need to adjust this font size for your system!
(defvar efs/default-font-size 180)
(defvar efs/default-variable-font-size 180)

#+end_src

* Tips for Use

In this document I've added links in many places that lead you to documentation
  for the various packages we use.
  If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to
  automatically install packages on a new system the first time you pull down
  your configuration.
  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room PADDING 

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t) ;; fait du bruit?

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                        treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)

#+end_src

** org-appear ( gras, italique, ect) puces helena
#+begin_src emacs-lisp  
  ;;------------------------------------------------------------
  ;; org-appear
  (setq org-emphasis-alist
  '(("*" (bold :foreground "#e82546"))
    ("/" (italic :background "#2e1f1a" :foreground "#e9967a" :height 0.95)) ;402b24
    ("_" (underline bold :foreground "#cd950c"))
    ("=" (bold :foreground "#24d152")) 
    ("~" (:foreground "#627bcc"))
    ("+" (bold :strike-through "#FFFFFF"))))

  (setq org-hide-emphasis-markers t) ;; Permet de planquer les étoiles quand on fait du gras par ex *jeajae*
#+end_src

#+RESULTS:
: t

* Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.
[[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with
which-key.
[[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (rune/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* UI Configuration
** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!

#+begin_src emacs-lisp

(use-package command-log-mode)

#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many
  different Emacs modes.
  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like
  best.
  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
(setq custom-safe-themes t) ;; evite qu'il demande si c'est safe à chq fois
(use-package spacemacs-theme
  :init (load-theme 'spacemacs-dark t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine,
you'll need to run *M-x all-the-icons-install-fonts* so that mode line icons display correctly.

Faut aussi lancer *nerd-icons-install-fonts*

#+begin_src emacs-lisp

(use-package all-the-icons)
(use-package nerd-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key
  binding in Emacs to offer you all possible completions for the prefix.
  For example, if you press =C-c= (hold control and press the letter =c=),
  a panel will appear at the bottom of the frame displaying all of the bindings
  under that prefix and which command they run.
  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
	   ("M-y" . 'counsel-yank-pop)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))


#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =efs/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.


#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src
** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

**** original 
#+begin_src emacs-lisp :tangle no

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
   (setq org-agenda-files "~/.agenda_files")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (efs/org-font-setup))

#+end_src

**** mon truc

  #+begin_src emacs-lisp
    ;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    ;; Org mode setup raccourcis:
    ;; insertion d'image avec C-c i:
    (add-hook 'org-mode-hook
	      (lambda ()
		(local-set-key (kbd "\C-c i") 'org-download-clipboard)))

    (global-set-key (kbd "\C-c a") 'org-agenda)

    ;; Org mode setup raccourcis:
    (define-key global-map "\C-cl" 'org-store-link)
    (define-key global-map "\C-ca" 'org-agenda)
    (setq org-log-done t)


    #+end_src
*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp :tangle no 

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Configure Babel Languages
To execute or export code in =org-mode= code blocks,
you'll need to set up =org-babel-load-languages= for each language you'd like to use.
[[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (shell .t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you're looking at right now,
and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp :tangle no

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/Projects/Code/emacs-from-scratch/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

** org roam 
***** internal links org roam
C'est ce qui permet de créer les ID vers des fichiers!!
Ces ID sont uniques et sont détectés par org roam comme étant des nodes
C'est BROKEN
*Ce truc fait tout déconner:* (problème création de nodes, enfin bref l'enfer.)
#+begin_src emacs-lisp 
;; IDS pour internal links:
;;'(use-package org-id :ensure t
;;:bind
;;                    )
;;;; on crée un raccourci pour org-id-get-create:
;;
;;(setq org-id-track-globally t) ;; rajouté pour problème nouveau node
;;(org-id-update-id-locations)

#+end_src
***** Base
#+begin_src emacs-lisp 
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org-roam")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ("C-c n b" . org-roam-db-build-cache) ;; créer database
	   ("C-c n r" . org-roam-db-sync) ;; refresh
	   :map org-mode-map
	   ("C-M-i"    . completion-at-point))
    :config
    (org-roam-setup))
#+end_src
***** UI
#+begin_src emacs-lisp 

;;UI:
(use-package org-roam-ui :ensure t)
(setq server-use-tcp t)
(setq server-host "localhost")
(setq server-port 1234)
;;(server-start)
(global-set-key (kbd "\C-c n o") 'org-roam-ui-mode) ;;Lance l'UI
(setq org-roam-ui-sync-theme t) ;; Pour pouvoir supprimer depuis l'UI
(org-roam-db-autosync-mode)

;; raccourcis org roam  ui :

(add-hook 'org-mode-hook
	  (lambda ()
	    (local-set-key (kbd "\C-c n g") 'org-roam-ui-change-local-graph) ;; Je sais pas à quoi sert ce truc, ça fait rien
	    (local-set-key (kbd "\C-c n d") 'org-roam-ui-remove-from-local-graph)
	    (local-set-key (kbd "\C-c n a") 'org-roam-ui-add-to-local-graph)
	    (local-set-key (kbd "\C-c n z") 'org-roam-ui-node-zoom)
	    ))
#+end_src
***** org id get create et refile raccourcis
#+begin_src emacs-lisp 
;; Raccourcis pour org id get create et refile:
;;(global-set-key (kbd "\C-c i") 'org-id-get-create) ;; déjà utilisé

;; (global-set-key (kbd "\C-c r") 'org-roam-refile)

(add-hook 'org-mode-hook
	  (lambda () ;; lambda pour créer un hook local
	    (local-set-key (kbd "\C-c n p") 'org-id-get-create)
	    (local-set-key (kbd "\C-c n m") 'org-roam-refile)
	    ))

#+end_src
[[id:b624f2eb-cdb9-49cb-a1ac-3c78b0ceed44][à quoi sert lambda() en emacs-lisp?]]
** org file apps 
#+begin_src emacs-lisp
(setq org-file-apps
      '(("\\.JPG\\'" . system)
        (auto-mode . emacs)
        ("\\.JPG\\'" . system)
        (directory . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . "zathura %s")
        ("\\.md\\'" . "code %s")
        ("\\.djvu\\'" . "xdg-open %s")
        ("\\.epub\\'" . "xdg-open %s")
        ("\\.odt\\'" . "libreoffice %s")
        ("\\.hip\\'" . "houdini %s")
        ("\\.blend\\'" . "blender %s")
        ("\\.xcf\\'" . "gimp %s")
        ("\\.hip\\'" . "/opt/hfs18.5.532/bin/houdinifx %s")
        ("\\.ntp\\'" . "~/Natron-2.3.15/Natron %s")
        ("\\.mp4\\'" . "cvlc %s")))
#+end_src
* Development
** Languages

*** IDE Features with lsp-mode

***** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many
  different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language
  Server Protocol]].
  Before trying to set up =lsp-mode= for a particular language,
  check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where
  =lsp-mode='s default keybindings will be added.
  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (prog-mode . lsp-deferred) ;; simplifie la config 
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c v")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui
[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.
Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph)
to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src

*** TypeScript

This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Important note!*
For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a
language server on your machine.
If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

*** JavaScript

/J'ai modifié le merdier de type script/
This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.
We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get
LSP features every time we edit TypeScript code.
https://emacs-lsp.github.io/lsp-mode/page/lsp-typescript/

#+begin_src emacs-lisp

  (use-package rjsx-mode
    :mode "\\.ts\\'"
    :hook (rjsx-mode . lsp-deferred)
    :config
    (setq rjsx-indent-level 2))
  (use-package js2-mode
    :mode "\\.ts\\'"
    :hook (js2-mode . lsp-deferred)
    :config
    (setq js2-indent-level 2))


#+end_src

*Important note!*
For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a
language server on your machine.
If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

*** [#A] Python developpement emacs 2024
:PROPERTIES:
:ID:       4a0722fc-bfe5-4817-bb4e-becfa639fe16
:END:
**** [#A] Explications 
We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.
Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the pyls configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

  pip install --user "python-language-server[all]"
  pip install debugpy # permet de debuguer

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you,
consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    (python-shell-interpreter "python"))
    ;;(dap-python-executable "python"))

  ;;(require 'dap-python)
  ;;(setq dap-python-debugger 'debugpy)

(use-package realgud :ensure t)
#+end_src

**** environnements virtuels  
You can use the pyvenv package to use =virtualenv= environments in Emacs.
The _pyvenv-activate_ command should configure Emacs to cause =lsp-mode= and
=dap-mode= to use the virtual environment when they are loaded,
just select the path to your virtual environment before loading your project.

(en gros le .venv)

#+begin_src emacs-lisp

  (use-package pyvenv
    :config
    (pyvenv-mode 1))

#+end_src

penser à faire *activate puis sélectionner le merdier* 
**** restart python 
    #+begin_src emacs-lisp 
      ;; On rajoute un hook pour avoir le raccourci C-c ! pour changer d'interpreteur python:

      (defun restart-python ()
	(interactive)
	(kill-buffer "*Python*")
	(run-python nil nil nil))

      (add-hook 'python-mode-hook
		(lambda ()
		  (local-set-key (kbd "M-p") 'restart-python)))
    #+end_src


**** indenting de merde 
TabError: inconsistent use of tabs and spaces in indentation, comment gérer ce problème proprement dans emacs?

Le TabError est une erreur courante en programmation,
particulièrement en Python,
qui se produit lorsqu'il y a un mélange incohérent de tabulations et d'espaces pour l'indentation du code.

***** Solutions dans Emacs
****** Utiliser uniquement des espaces
- Configurer Emacs pour utiliser des espaces au lieu des tabulations :
  #+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  #+END_SRC

****** Configurer l'indentation par langage
- Pour Python, utiliser python-mode et configurer l'indentation :
  #+BEGIN_SRC emacs-lisp
  (setq python-indent-offset 4)
  #+END_SRC

****** Utiliser un outil de formatage automatique
- Intégrer des outils comme Black pour Python :
  #+BEGIN_SRC emacs-lisp
  (use-package python-black
    :demand t
    :after python
    :hook (python-mode . python-black-on-save-mode))
  #+END_SRC

***** Conclusion
En adoptant ces pratiques dans Emacs, vous pouvez efficacement prévenir et résoudre les problèmes d'indentation incohérente, évitant ainsi les TabErrors et améliorant la lisibilité de votre code.

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point=
which is more reminiscent of what you would expect from an IDE.
We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :hook (shell . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
  
#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for
Emacs which makes it a lot easier to navigate around code projects for various languages.
Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;;  (use-package evil-magit
;;    :after magit)

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge)

#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Plier des trucs 
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'hs-minor-mode)
#+end_src
** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :ensure t 
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Applications
** Some App

This is an example of configuring another non-Emacs application using org-mode.  Not only do we write out the configuration at =.config/some-app/config=, we also compute the value that gets stored in this configuration from the Emacs Lisp block above it.

#+NAME: the-value
#+begin_src emacs-lisp tangle no

  (+ 55 100)

#+end_src

#+begin_src conf tangle .config/some-app/config :noweb yes

  value=<<the-value()>>

#+end_src

* Mes trucs 
** fountain 
#+begin_src emacs-lisp 
(use-package fountain-mode
  :ensure t
  :mode "\\.fountain\\'"
  :config
  (setq fountain-export-path "/home/kim/org-roam/fountain/"))
#+end_src

** [[https://systemcrafters.net/emacs-from-scratch/the-best-default-settings/][nice default settings]]
#+begin_src emacs-lisp
  (recentf-mode 1)
  (global-set-key (kbd "C-c F") 'recentf) ;;POWERFUL
  (setq history-length 25)
  ;;(savehist-mode 1)
  ;; Remember and restore the last cursor location of opened files
  (save-place-mode 1)
  ;; Don't pop up UI dialogs when prompting
  (setq use-dialog-box nil)
  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)
#+end_src

** undo tree
  #+begin_src emacs-lisp 

	  ;; Le undo tree broken
  (use-package undo-tree :ensure t)
  (setq undo-tree-visualizer-diff t)
  (setq undo-tree-history-directory-alist
        '(("." . "/home/kim/org-roam/undo_trees")))

(global-undo-tree-mode)
    #+end_src
** copier chemin fichier 
    #+begin_src emacs-lisp 
    ;; COPIER LE CHEMIN D'UN FICHIER: 


    (defun copy-file-path ()
      "Copy the full path of the current buffer to the clipboard."
      (interactive)
      (kill-new (buffer-file-name))
      (message "Copied path: %s" (buffer-file-name)))

    (global-set-key (kbd "C-c c p") 'copy-file-path)
    #+end_src
** Code
*** uml
#+begin_src emacs-lisp
(setq org-plantuml-jar-path "~/plantuml/plantuml.jar")
(setq plantuml-jar-path "~/plantuml/plantuml.jar")

;; Activer PlantUML dans Org-mode
(org-babel-do-load-languages
 'org-babel-load-languages
 '((plantuml . t)))

;; Installer plantuml-mode
(use-package plantuml-mode
  :ensure t
  :config
  (setq plantuml-default-exec-mode 'jar))
#+end_src
*** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet :ensure t)
  (yas-global-mode 1)
#+end_src
*** indenting code blocks
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src
*** tangling + chmod 

#+begin_src emacs-lisp 
(defun my-org-babel-tangle-chmod ()
  "Tangle and chmod +x"
  (interactive)
  (org-babel-tangle)
  (dolist (file (org-babel-tangle))
    ;; On affiche le fichier
    (message file)
    ;; On fait un chmod +x sur le fichier
    ;; On affiche la commande shell:
    (shell-command (format "chmod +x %s" file))
    (message (format "chmod +x %s" file))))


;; On remplace la fonction org-babel-tangle par notre fonction


(add-hook 'org-mode-hook
	  (lambda ()
	    (local-set-key (kbd "C-c C-v C-t") 'my-org-babel-tangle-chmod))

	  (lambda ()
	    (local-set-key (kbd "C-c C-,") 'org-insert-structure-template))
	  )

;; On peut maintenant faire un C-c C-v t pour tangle et rendre exécutable le fichier source
#+end_src

** commandes interactives IA 
[[id:0fcf6c62-c888-40b2-abe4-ca0602a6ecf8][PDF extractor python]]
[[id:484051ee-461a-4289-abc3-9ede2a581eaf][emacs features IA]]
**** convert org 
#+begin_src emacs-lisp
(defun convert-org-from-region ()
  "Send the selected region to convert_org command and insert the result."
  (interactive)
  (let* ((start (if (region-active-p) (region-beginning) (point-min)))
         (end (if (region-active-p) (region-end) (point-max)))
         (text (buffer-substring-no-properties start end))
         (result-buffer (generate-new-buffer "*convert-org-result*")))
    (with-current-buffer result-buffer
      (insert text)
      (call-process-region (point-min) (point-max) "convert_org_local" t t nil))
    (let ((result (with-current-buffer result-buffer
                    (buffer-string))))
      (kill-buffer result-buffer)
      (delete-region start end)
      (goto-char start)
      (insert result))))

;; (global-set-key (kbd "C-c u") 'make-uml-from-region)


#+end_src

**** make quiz 
#+begin_src emacs-lisp
(defun make-quiz-from-region ()
  "Send the selected region to make_quiz command and insert the result."
  (interactive)
  (let* ((start (if (region-active-p) (region-beginning) (point-min)))
         (end (if (region-active-p) (region-end) (point-max)))
         (text (buffer-substring-no-properties start end))
         (result-buffer (generate-new-buffer "*make-quiz-result*"))
         (command (format "make_quiz_local \"%s\"" (shell-quote-argument text))))
    (with-current-buffer result-buffer
      (shell-command command (current-buffer)))
    (let ((result (with-current-buffer result-buffer
                    (buffer-string))))
      (kill-buffer result-buffer)
      (delete-region start end)
      (goto-char start)
      (insert result))))

;; (global-set-key (kbd "C-c u") 'make-uml-from-region)


#+end_src

**** code blocks 
#+begin_src emacs-lisp
(defun ai-blocks-to-org ()
  "Convert AI-style code blocks to Org-mode code blocks in the current buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "```\\({[^}]+}\\|[^[:space:]]+\\)?\\([[:space:]]*\n\\)\\(\\(?:.*\n\\)*?\\)```" nil t)
      (let ((lang (match-string 1))
            (code (match-string 3)))
        (replace-match (concat "#+begin_src " (or lang "") "\n"
                               code
                               "#+end_src"))))))
#+end_src

**** Execute request 
#+begin_src emacs-lisp
(defun ai-request ()
  "Send the selected region to ai_request command and insert the result."
  (interactive)
  (let* ((start (if (region-active-p) (region-beginning) (point-min)))
         (end (if (region-active-p) (region-end) (point-max)))
         (text (buffer-substring-no-properties start end))
         (result-buffer (generate-new-buffer "*make-quiz-result*"))
         (command (format "ai_request_local \"%s\"" (shell-quote-argument text))))
    (with-current-buffer result-buffer
      (shell-command command (current-buffer)))
    (let ((result (with-current-buffer result-buffer
                    (buffer-string))))
      (kill-buffer result-buffer)
      (delete-region start end)
      (goto-char start)
      (insert result))))

;; (global-set-key (kbd "C-c u") 'make-uml-from-region)

#+end_src

**** explain
#+begin_src emacs-lisp
(defun ai-explain ()
  "Send the selected region to ai_explain command and insert the result."
  (interactive)
  
  ;; Détermine la région à traiter (sélection ou buffer entier)
  (let* ((start (if (region-active-p) (region-beginning) (point-min)))
         (end (if (region-active-p) (region-end) (point-max)))
         
         ;; Extrait le texte de la région
         (text (buffer-substring-no-properties start end))
         
         ;; Crée un nouveau buffer pour le résultat
         (result-buffer (generate-new-buffer "*make-quiz-result*"))
         
         ;; Prépare la commande shell à exécuter
         (command (format "ai_explain_local \"%s\"" (shell-quote-argument text))))
    
    ;; Exécute la commande shell et stocke le résultat dans result-buffer
    (with-current-buffer result-buffer
      (shell-command command (current-buffer)))))

#+end_src

**** insert
insère une demande à l'ia sans context
#+begin_src emacs-lisp
;; Définition de la fonction ai-request
(defun ai-insert ()
  "Send the selected region to ai_request command and insert the result."
  (interactive)
  ;; Utilisation de let* pour définir des variables locales
  (let* ((start (if (region-active-p) (region-beginning) (point-min)))
         (end (if (region-active-p) (region-end) (point-max)))
         (text (buffer-substring-no-properties start end))

         (result-buffer (generate-new-buffer "*make-quiz-result*"))
         ;; Construire la commande shell à exécuter
         (command (format "ai_insert_local" )))
    
    ;; Exécuter la commande shell dans le buffer de résultat
    (with-current-buffer result-buffer
      (shell-command command (current-buffer)))
    
    ;; Traiter le résultat
    (let ((result (with-current-buffer result-buffer
                    (buffer-string))))
      ;; Nettoyer : supprimer le buffer de résultat
      (kill-buffer result-buffer)
      ;; Remplacer la région sélectionnée par le résultat
      (delete-region start end)
      (goto-char start)
      (insert result))))

;; (global-set-key (kbd "C-c u") 'make-uml-from-region)

#+end_src

**** multi context
#+begin_src emacs-lisp

(defun ai-multicont ()
  "Send the selected region to ai_multicont command and display the result in a new buffer."
  (interactive)
  (let* ((start (if (region-active-p) (region-beginning) (point-min)))
         (end (if (region-active-p) (region-end) (point-max)))
         (text (buffer-substring-no-properties start end))
         (result-buffer (generate-new-buffer "*ai-multicont-result*"))
         (command (format "screen -dmS jaj ai_multi_context \"%s\"" (shell-quote-argument text))))
    (with-current-buffer result-buffer
      (shell-command command (current-buffer)))
    (switch-to-buffer-other-window result-buffer)))
;; (global-set-key (kbd "C-c u") 'make-uml-from-region)

#+end_src

**** ai export 

#+begin_src emacs-lisp
(defun my-org-roam-capture-with-timestamp ()
  (let* ((time (format-time-string "%Y-%m-%d-%H%M%S"))
         (file-name (concat time ".org"))
         (title (concat "Chat du " (format-time-string "%Y-%m-%d à %H:%M:%S : TITRE")))
         (chat-content (with-temp-buffer
                         (insert-file-contents "/tmp/chat_nudger")
                         (buffer-string))))
    (org-roam-capture- :node (org-roam-node-create :title title)
                       :templates '(("d" "default" plain
                                     "%?\
\* Contenu du chat


\

"
                                     :if-new (file+head "${slug}.org"
                                                        "#+title: ${title}\n")
                                     :unnarrowed t))
                       :props `(:file-name ,file-name))
    (with-current-buffer (org-capture-get :buffer)
      (goto-char (point-max))
      (insert chat-content))))

(defun ai-export ()
  (interactive)
  (my-org-roam-capture-with-timestamp))

#+end_src

